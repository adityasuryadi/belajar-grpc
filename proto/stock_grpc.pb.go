// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockService_ListStocks_FullMethodName        = "/stock.StockService/ListStocks"
	StockService_ToggleStocks_FullMethodName      = "/stock.StockService/ToggleStocks"
	StockService_ListSubscriptions_FullMethodName = "/stock.StockService/ListSubscriptions"
	StockService_LiveStock_FullMethodName         = "/stock.StockService/LiveStock"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	// Unary API: Get list of available stock codes
	ListStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockCodes, error)
	// Client Streaming: Enable/disable stock availability
	ToggleStocks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StockSubscription, StockCodes], error)
	// Server Streaming: Get list of currently subscribed stocks
	ListSubscriptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockCode], error)
	// Bidirectional Streaming: Live stock price subscription
	LiveStock(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StockSubscription, StockPrices], error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) ListStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockCodes)
	err := c.cc.Invoke(ctx, StockService_ListStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ToggleStocks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StockSubscription, StockCodes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], StockService_ToggleStocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StockSubscription, StockCodes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_ToggleStocksClient = grpc.ClientStreamingClient[StockSubscription, StockCodes]

func (c *stockServiceClient) ListSubscriptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockCode], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[1], StockService_ListSubscriptions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, StockCode]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_ListSubscriptionsClient = grpc.ServerStreamingClient[StockCode]

func (c *stockServiceClient) LiveStock(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StockSubscription, StockPrices], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[2], StockService_LiveStock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StockSubscription, StockPrices]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_LiveStockClient = grpc.BidiStreamingClient[StockSubscription, StockPrices]

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility.
type StockServiceServer interface {
	// Unary API: Get list of available stock codes
	ListStocks(context.Context, *emptypb.Empty) (*StockCodes, error)
	// Client Streaming: Enable/disable stock availability
	ToggleStocks(grpc.ClientStreamingServer[StockSubscription, StockCodes]) error
	// Server Streaming: Get list of currently subscribed stocks
	ListSubscriptions(*emptypb.Empty, grpc.ServerStreamingServer[StockCode]) error
	// Bidirectional Streaming: Live stock price subscription
	LiveStock(grpc.BidiStreamingServer[StockSubscription, StockPrices]) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockServiceServer struct{}

func (UnimplementedStockServiceServer) ListStocks(context.Context, *emptypb.Empty) (*StockCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStocks not implemented")
}
func (UnimplementedStockServiceServer) ToggleStocks(grpc.ClientStreamingServer[StockSubscription, StockCodes]) error {
	return status.Errorf(codes.Unimplemented, "method ToggleStocks not implemented")
}
func (UnimplementedStockServiceServer) ListSubscriptions(*emptypb.Empty, grpc.ServerStreamingServer[StockCode]) error {
	return status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedStockServiceServer) LiveStock(grpc.BidiStreamingServer[StockSubscription, StockPrices]) error {
	return status.Errorf(codes.Unimplemented, "method LiveStock not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}
func (UnimplementedStockServiceServer) testEmbeddedByValue()                      {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_ListStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListStocks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ToggleStocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).ToggleStocks(&grpc.GenericServerStream[StockSubscription, StockCodes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_ToggleStocksServer = grpc.ClientStreamingServer[StockSubscription, StockCodes]

func _StockService_ListSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).ListSubscriptions(m, &grpc.GenericServerStream[emptypb.Empty, StockCode]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_ListSubscriptionsServer = grpc.ServerStreamingServer[StockCode]

func _StockService_LiveStock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).LiveStock(&grpc.GenericServerStream[StockSubscription, StockPrices]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_LiveStockServer = grpc.BidiStreamingServer[StockSubscription, StockPrices]

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStocks",
			Handler:    _StockService_ListStocks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ToggleStocks",
			Handler:       _StockService_ToggleStocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListSubscriptions",
			Handler:       _StockService_ListSubscriptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveStock",
			Handler:       _StockService_LiveStock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stock.proto",
}
